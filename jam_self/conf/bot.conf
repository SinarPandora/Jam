# Bot 设置
bot {
  # Bot 的 QQ
  jam_qq = 3219017931
  # Bot 的 QQ 密码（仅用于自动登录，使用 --no_backend 参数时不需要填写）
  password = "xxx"

  # 果酱配置文件存放位置
  jam_config_file = "../conf/sxdl/config/jam_config.conf"

  # 远程编辑
  # 远程编辑开启后，请不要手动修改源文件，除非您清楚如何解决 git 冲突
  remote_editing {
    # 是否开启远程编辑
    enable = false
    # 远程仓库地址（http）
    repo = ""
    # 用户名
    user_name = "test"
    # 注册时使用的邮件地址
    git_email = "test@abc.com"
    # 秘钥/token
    secret = ""
    # 分支名称
    branch = "main"
  }
}

# 插件设置
plugin {
  # 插件目录
  # 请放置 jar 格式的插件在该文件下，果酱会自动加载他们
  plugin_path = "../plugins"
  # 是否自动启用插件
  auto_enable = true
}

# 系统设置
system {
  # 是否开启调试模式
  # 调试模式下会输出收到的每一条消息，会略微导致响应速度变慢，并且会导致日志文件明显变大
  # 在调试应用和复杂的 SSDL 时可以考虑打开
  # 设置为 true 表示开启
  # 设置为 false 表示不开启
  debugMode = true
  # 临时文件目录
  temp_dir = "../tmp"
  # SXDL 文件目录
  # 指定 SXDL 脚本文件的存放目录
  sxdl_path = "../conf/sxdl"
  # SSDL 文件后缀名
  # 可以根据喜好设置多个（强迫症选项）
  # 请用英文逗号隔开，并将每个后缀名用英文双引号括起来
  file_extension = [".ssdl", ".jam3", ".stdl", ".sxdl"]

  # 自动清理超过 N 天的消息
  # 设置为 -1 时不清理消息记录
  auto_remove_message_before = 14
}

# Jam lambda 配置
lambda {
  # lambda 脚本存放位置（根路径）
  # 你可以在该文件夹下创建自己的文件夹以存放不同类型的脚本
  script_root_path = "../conf/sxdl/lambda"
}

# 以下是开发者配置，如果你不知道会发生什么，请不要修改！

# 酷Q HTTP 插件连接设置
coolQQ {
  # 酷 Q 服务器地址（如果是本地，请设置为 127.0.0.1）
  host = "127.0.0.1"
  port {
    # 发送消息端口
    post = 5700
    # 收消息端口
    socket = 7890
  }

  # 酷Q backend（因为酷Q官方停止了服务，
  # 因此 jam 选择依靠第三方的 CQHttp 支持端来运作）
  backend {
    # Miari x CQHttp
    mirai {
      # 支持端路径
      path = "../backend"
    }
  }
}

# 内存数据库配置
databases {
  # 设置使用的数据库
  # 默认为集成式数据库 H2
  # 同时也支持 PostgreSQL，如需使用请替换值为 "PGSQL"
  use = "H2"

  # H2 模式
  H2 {
    profile = "slick.jdbc.H2Profile$"
    db {
      dirver = "org.h2.Driver"
      # 默认会将 h2 内存数据库保存为文件并存储在 db 文件夹下
      # 但是要注意的是，该文件同时只能被一个程序读取，这意味着如果你使用其他软件读取其内容时，无法启动 Bot
      url = "jdbc:h2:./db/memory;mode=PostgreSQL;ignorecase=TRUE;database_to_upper=false"
      connectionPool = "HikariCP"
      keepAliveConnection = true
      user = "root"
      password = ""
    }
  }

  # PostgreSQL 模式
  PGSQL {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      dirver = "org.postgresql.Driver"
      # 使用 PostgreSQL 时请预先创建对应的库
      url = "jdbc:postgresql://localhost:5432/jam_bot"
      connectionPool = "HikariCP"
      keepAliveConnection = true
      user = "sinar"
      password = "12345678"
    }
  }
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

# Actor 系统配置
akka {
  # 关闭死信日志（若本地调试，可将该属性设置为 on 以输出死信）
  akka.log-dead-letters = off
}

