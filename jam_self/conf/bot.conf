# Bot 设置
bot {
  # Bot 的名字，目前用处不大
  name = "果酱"
  # Bot 的 QQ
  jam_qq = 3219017931
  # Bot 的 QQ 密码（仅用于自动登录）
  password = "xxx"
  # Master QQ 号，即能触发 Master 指令的 QQ 用户，只能设置一个
  master_qq = 1211402231
  # 响应频率：范围 1 ~ 100 的整数，代表收到消息后有百分之几的几率触发步骤
  # 设置为 100 时视为必定触发（如果只想控制某些步骤的触发几率，请使用触发频率语句）
  response_frequency = 100

  # 自动接受好友申请
  auto_accept_friend_request = true
  # 自动接受加群申请
  auto_accept_group_request = true

  # 生物钟
  biochronometer {
    # 起床时间（24 时制，单位：小时）
    wake_up_time = 7
    # 就寝时间（24 时制，单位：小时）
    go_asleep_time = 17
    # 活跃时间模式
    # 在设置的时间段下，触发几率会变为 100（忽略 response_frequency）
    # 在中括号中使用 "数字-数字" 的方式进行设置
    # 多个时间段用英文逗号隔开
    # （24 时制，单位：小时）
    # 举例：["7-8", "19-22"]
    # 如果需要跨一天，请分段设置：["22-23", "0-1"]
    # 设置为 ["None"] 代表不启用活跃时间模式
    active_times = ["9-10", "16-17"]
    # 全天候模式
    # 该模式下会 24 小时持续响应消息
    # （即忽略 get_up_time 和 go_bed_time）
    # 设置为 true 表示开启
    # 设置为 false 表示不开启
    all_time_at_your_service = false
  }
}

# 性格设定
character {
  # 监护人相关
  for_master {
    # %s 代表监护人的名字
    # 可以放在这部分配置的任何地方
    # 如何称呼你
    name = "同志"
    # 早安
    good_morning = "早上好！%s！"
    # 晚安
    good_night = "晚安~ %s"
  }
  # 梦呓：在果酱睡觉时，如果艾特或私聊果酱，将有 25% 几率果酱回复梦话
  # 如果什么也不写，这个功能就不会启用
  balderdash = ["唔。。。嗯。。。", "（果酱翻了个身）"]
  # 随机数 AI：靠随机跟人类聊天的 bot
  # 当随机数在该范围内时回复的内容
  random_ai {
    1 = "这 是 真 理"
    100 = "異議あり！！"
    2-20 = "有一说一，非常赞同"
    21-40 = "我觉得可以"
    41-60 = "一般.jpg"
    61-80 = "不太行"
    81-99 = "反对"
  }
}

# 插件设置
plugin {
  # 插件目录
  # 请放置 jar 格式的插件在该文件下，果酱会自动加载他们
  plugin_path = "../plugins"
  # 是否自动启用插件
  auto_enable = true
  # 图片 Bot 插件配置
  picbot {
    # APIKey
    # 请访问 https://api.lolicon.app/#/setu 获取
    # 若不填写 Key 会导致功能受到限制
    apikey = ""
  }
  # RSS 订阅插件配置
  # 目前仅支持 RSSHUB （https://docs.rsshub.app/）
  rss {
    style {
      # 可定义不同源默认的样式
      # 可选样式如下：
      #  - 图文混排：
      #     带有图片，摘要和链接，是信息量最多的样式
      #     为了防止刷屏，图片只会显示最多三张
      #  - 摘要和链接：
      #     仅带有摘要信息（文字）和链接的样式
      #  - 仅摘要：
      #     连链接都没有的样式，非常的简短
      # 默认样式
      default = "图文混排"
      # 自定义其他类型源的样式
      custom = {
        # 配置举例：
        # 我要订阅的地址为：https://rsshub.app/weibo/user/123456
        # 等号左侧的内容为：                  ———⬆️————⬆️———
        # 即 rsshub.app/ 和 最后一个 / 之间的内容
        "weibo/user" = "图文混排"
      }
    }
    # 如果觉得 RSSHUB 官方不稳定，可以尝试自己搭建本地的 RSSHUB
    # 搭建参考：https://docs.rsshub.app/install/#docker-compose-bu-shu
    # 如果使用了自己搭建的 RSS 服务，请在此处填写地址
    # 填写后，将同时支持官方地址和自建地址，并默认使用自建地址
    # 举例：http://127.0.0.1:1200/
    deploy_url = ""
  }
}

# 系统设置
system {
  # 是否开启调试模式
  # 调试模式下会输出收到的每一条消息，会略微导致响应速度变慢，并且会导致日志文件明显变大
  # 在调试应用和复杂的 SSDL 时可以考虑打开
  # 设置为 true 表示开启
  # 设置为 false 表示不开启
  debugMode = true
  # SSDL 文件目录
  # 指定 SSDL 文件的存放目录
  ssdl_path = "../conf/ssdl"
  # SSDL 文件后缀名
  # 可以根据喜好设置多个（强迫症选项）
  # 请用英文逗号隔开，并将每个后缀名用英文双引号括起来
  file_extension = [".ssdl", ".jam3"]

  # 监听聊天消息相关功能设置
  message_listener {
    # 前置任务（将在 SSDL 被解析前执行）
    pre_handle {
      # 是否以异步方式运行前置任务
      run_task_async = true
      # 将执行的前置任务
      # 如果 run_task_async = false，这些任务会以列表顺序执行（从前到后）
      # 目前可用的前置任务：
      #    - 反向复读图片：如果聊天内一张图片被连续发送了两次，则将图片翻转后复读
      #    - 替换小程序跳转：解析聊天中的小程序，并发送真实地址，减少 PC 聊天中出现 "请使用最新版本手机QQ查看" 的尴尬
      enabled_tasks = ["反向复读图片", "替换小程序跳转"]
    }
  }
}


# 以下是开发者配置，如果你不知道会发生什么，请不要修改！

# 酷Q HTTP 插件连接设置
coolQQ {
  # 酷 Q 服务器地址（如果是本地，请设置为 127.0.0.1）
  host = "127.0.0.1"
  port {
    # 发送消息端口
    post = 5700
    # 收消息端口
    socket = 7890
  }

  # 酷Q backend（因为酷Q官方停止了服务，
  # 因此 jam 选择依靠第三方的 CQHttp 支持端来运作）
  backend {
    # Miari x CQHttp
    mirai {
      # 支持端路径
      path = "../backend"
    }
  }
}

# 内存数据库配置
databases {
  # 设置使用的数据库
  # 默认为集成式数据库 H2
  # 同时也支持 PostgreSQL，如需使用请替换值为 "PGSQL"
  use = "H2"

  # H2 模式
  H2 {
    profile = "slick.jdbc.H2Profile$"
    db {
      dirver = "org.h2.Driver"
      # 默认会将 h2 内存数据库保存为文件并存储在 db 文件夹下
      # 但是要注意的是，该文件同时只能被一个程序读取，这意味着如果你使用其他软件读取其内容时，无法启动 Bot
      url = "jdbc:h2:./db/memory;mode=PostgreSQL;ignorecase=TRUE;database_to_upper=false"
      connectionPool = "HikariCP"
      keepAliveConnection = true
      user = "root"
      password = ""
    }
  }

  # PostgreSQL 模式
  PGSQL {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      dirver = "org.postgresql.Driver"
      # 使用 PostgreSQL 时请预先创建对应的库
      url = "jdbc:postgresql://localhost:5432/jam_bot"
      connectionPool = "HikariCP"
      keepAliveConnection = true
      user = "sinar"
      password = "12345678"
    }
  }
}
