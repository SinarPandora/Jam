# 性格设定
character {
  # Bot 的名字
  name = "果酱"
  # 响应频率：范围 1 ~ 100 的整数，代表收到消息后有百分之几的几率触发步骤
  # 设置为 100 时视为必定触发（如果只想控制某些步骤的触发几率，请使用触发频率语句）
  response_frequency = 100
  # 看护人相关
  for_master {
    # 看护人 QQ 号列表，即能触发看护人指令的 QQ 用户，输入多个时用英文逗号隔开
    master_list = [1211402231]
    # %s 代表看护人的名字
    # 可以放在这部分配置的任何地方
    # 如何称呼你
    name = "同志"
    # 早安提示语
    good_morning = "早上好！%s！"
    # 晚安提示语
    good_night = "晚安~ %s"
  }
  # 梦呓：在果酱睡觉时，如果艾特或私聊果酱，将回复梦话
  # 如果什么也不写，这个功能就不会启用
  balderdash = ["唔。。。嗯。。。", "（果酱翻了个身）"]
  # 随机数 AI：靠随机跟人类聊天的 bot
  # 当随机数在该范围内时回复的内容
  random_ai {
    1 = "这 是 真 理"
    100 = "異議あり！！"
    2-20 = "有一说一，非常赞同"
    21-40 = "我觉得可以"
    41-60 = "一般.jpg"
    61-80 = "不太行"
    81-99 = "反对"
  }

  # 自动接受好友申请
  auto_accept_friend_request = true
  # 自动接受加群申请
  auto_accept_group_request = true
}

# 生物钟
biochronometer {
  # 起床时间（24 时制，单位：小时）
  wake_up_time = 8
  # 就寝时间（24 时制，单位：小时）
  go_asleep_time = 1
  # 活跃时间模式
  # 在设置的时间段下，触发几率会变为 100（忽略 response_frequency）
  # 在中括号中使用 "数字-数字" 的方式进行设置
  # 多个时间段用英文逗号隔开
  # （24 时制，单位：小时）
  # 举例：["7-8", "19-22"]
  # 如果需要跨一天，请分段设置：["22-23", "0-1"]
  # 设置为 ["None"] 代表不启用活跃时间模式
  active_times = ["None"]
  # 全天候模式
  # 该模式下会 24 小时持续响应消息
  # （即忽略 get_up_time 和 go_bed_time）
  # 设置为 true 表示开启
  # 设置为 false 表示不开启
  all_time_at_your_service = false
}

# 是否让关键词匹配乱序执行
# 默认执行顺序：
# A：聊天范围 > 群范围/私聊范围（global_xxx） > 全局范围（global）
# B：内容为（全文匹配）> 匹配（正则）> 句首出现（开头）> 句尾出现（结尾）> 句中出现（包含）
# C：编号大 > 编号小
# 乱序模式下，规则 A 依然生效
match_out_of_order = false

plugin {
  # 小梦配置
  dream_ai {
    # 手机号，用于登录彩云小梦
    # 若不打算开启小梦，可以留空
    mobile = ""
  }
  # 图片 Bot 插件配置
  picbot {
    # Pixiv 图片地址代理
    # 请参考：https://api.lolicon.app/#/setu?id=proxy
    # 一般情况下请使用默认值
    pixiv_proxy = "i.pixiv.re"
    # 每次调用 API 获取的图片数量（1-100）
    # 若 API 调用频繁失败，可以调低该配置
    # 每次图片更新任务获取的图片数量最大为 10 * 该值
    api_batch_size = 100
  }
  # RSS 订阅插件配置（该功能仍在开发中，不推荐使用）
  # 目前仅支持 RSSHUB （https://docs.rsshub.app/）
  rss {
    style {
      # 可定义不同源默认的样式
      # 可选样式如下：
      #  - 图文混排：
      #     带有图片，摘要和链接，是信息量最多的样式
      #     为了防止刷屏，图片只会显示最多三张
      #  - 摘要和链接：
      #     仅带有摘要信息（文字）和链接的样式
      #  - 仅摘要：
      #     连链接都没有的样式，非常的简短
      # 默认样式
      default = "图文混排"
      # 自定义其他类型源的样式
      custom = {
        # 配置举例：
        # 我要订阅的地址为：https://rsshub.app/weibo/user/123456
        # 等号左侧的内容为：                  ———⬆️————⬆️———
        # 即 rsshub.app/ 和 最后一个 / 之间的内容
        "weibo/user" = "图文混排"
      }
    }
    # 如果觉得 RSSHUB 官方不稳定，可以尝试自己搭建本地的 RSSHUB
    # 搭建参考：https://docs.rsshub.app/install/#docker-compose-bu-shu
    # 如果使用了自己搭建的 RSS 服务，请在此处填写地址
    # 填写后，将同时支持官方地址和自建地址，并默认使用自建地址
    # 举例：http://127.0.0.1:1200/
    deploy_url = ""
  }
  # 前置任务（将在关键词匹配前执行）
  pre_handle {
    # 是否以异步方式运行前置任务
    run_task_async = true
    # 将执行的前置任务
    # 如果 run_task_async = false，这些任务会以列表顺序执行（从前到后）
    # 目前可用的前置任务：
    #    - 反向复读图片：如果聊天内一张图片被连续发送了两次，则将图片翻转后复读
    #    - 替换小程序跳转：解析聊天中的小程序，并发送真实地址，减少 PC 聊天中出现 "请使用最新版本手机QQ查看" 的尴尬
    enabled_tasks = ["反向复读图片", "替换小程序跳转"]
    # "反向复读图片" 前置任务配置
    flip_repeat_picture {
      # 使用 FFMpeg 进行图片反向
      # 设置为 false 开启默认模式，该模式下图片在内存中处理，速度快但可能使 Gif 错位
      # 设置为 true 开启 ffmpeg 模式，该模式兼容性强，且不会出现 Gif 错位的问题
      use_ffmpeg = false
      # ffmpeg 可执行文件地址
      # 若设置为空，则会从环境变量 $PATH 中寻找
      ffmpeg_path = ""
      # 对非 gif 图使用随机滤镜
      # 默认只会翻转非 gif 图
      # 随机滤镜包括：翻转，旋转，单向/多向动感模糊
      use_random_filter = false
    }
  }
  # 后置任务（将在关键词匹配后执行（无论消息是否被捕获））
  post_handle {
    # 是否以异步方式运行后置任务
    run_task_async = true
    # 将执行的后置任务
    # 如果 run_task_async = false，这些任务会以列表顺序执行（从前到后）
    # 目前可用的后置任务：
    #    - 联想回复：若消息内容包含艾特 bot，则联想消息内容并给出回复
    #    - 未匹配时联想回复：若消息内容包含艾特 bot，并且没有被捕获，则联想消息内容并给出回复
    # PS：建议使用更加灵活的坠梦（也称为联想回复）指令来代替联想回复任务
    enabled_tasks = []
  }
  # 订阅推送
  # 在B站更新，发送微博（等）时推送到群聊
  source_push {
    # 推送模板文件存放地址
    template_dir = "../conf/sxdl/template"
    # 推送模板配置
    template_mapping {
      "B站动态" = "bili_feed"
      "B站投稿" = "bili_video"
      "B站直播" = "bili_live"
      "微博" = "weibo"
    }
    override {
      "B站动态" {
        "12345" {
          color = "F9F0F9"
        }
      }
    }
  }
}
